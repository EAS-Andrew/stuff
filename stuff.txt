Diagram 1: Teams provide an MPW glassbreak account during onboarding that will be used for approving deployments.

During the onboarding process, teams are required to provide an MPW (Multi-Person Workflow) glassbreak account. This account serves as a crucial component for the approval process of deployments. By utilizing this account, teams can ensure that only authorized individuals can review and approve changes before they are deployed.

The MPW glassbreak account acts as a centralized platform where teams can collaborate and coordinate their efforts to assess the readiness of deployments. It serves as a secure channel through which teams can request and obtain the necessary approvals from relevant stakeholders. By utilizing this dedicated account, teams can streamline the deployment approval process and ensure that all necessary checks and balances are in place before moving forward.

Diagram 2: When a developer is ready to promote a change to an environment - They raise a pull request against the target environment branch. Branch protection rules specified in the repository for any environment branches enforce 2 required approvals for pull requests, one of which needs to be by the approvers group. This enforces both a four-eyes check and the necessary actor with a valid ServiceNOW change record must approve the deployment.

When a developer is prepared to promote a change to a specific environment, they initiate the process by raising a pull request against the corresponding target environment branch. To ensure a robust and controlled deployment workflow, the repository is configured with branch protection rules that dictate the required steps for pull request approvals.

According to these rules, any pull request targeting environment branches must have at least two approvals. This requirement serves two essential purposes. First, it enforces a "four-eyes check," meaning that multiple individuals must review the proposed changes to minimize the likelihood of errors or oversights. By involving more than one set of eyes, the chances of detecting potential issues are significantly improved.

Additionally, one of the required approvals needs to come from the designated approvers group. This group consists of individuals with the authority and expertise to evaluate the changes based on specific criteria and guidelines. Their approval ensures that the deployment aligns with established standards and best practices.

Furthermore, the branch protection rules also specify that the necessary actor with a valid ServiceNOW change record must approve the deployment. This requirement ensures that only authorized individuals, who have followed the proper change management process within the ServiceNOW system, can grant approval for the deployment. By incorporating this additional layer of validation, organizations can maintain a high level of control and accountability over the deployment process, mitigating potential risks and ensuring compliance with established protocols.



Description:
The deployment approval workflow is a crucial aspect of any software development or IT operations process. It ensures that changes and updates to applications, systems, or infrastructure are properly reviewed, validated, and approved before being deployed. While the current document describes the absence of an existing deployment process, the purpose of this document is to identify the need for a deployment approval workflow and outline the associated challenges that arise from its absence.

Problem Statement:
The absence of a structured deployment approval workflow poses several challenges and risks within the software development or IT operations environment. These challenges include:

Lack of control and governance: Without a defined deployment approval process, there is a lack of control and governance over the changes being introduced into the production environment. This increases the risk of unauthorized or untested changes being deployed, potentially leading to system failures, security breaches, or compliance issues.

Increased operational risks: The absence of a deployment approval workflow exposes organizations to higher operational risks. Changes that are not properly reviewed and validated can introduce bugs, errors, or compatibility issues, resulting in system downtime, customer dissatisfaction, and financial losses.

Inefficient change management: Without a structured workflow, managing and tracking changes becomes a manual and error-prone task. It becomes challenging to prioritize, schedule, and coordinate changes effectively, leading to confusion, delays, and potential conflicts between different teams or projects.

Lack of collaboration and coordination: The absence of a deployment approval workflow hampers effective collaboration and coordination between development teams, quality assurance, operations, and other stakeholders. This can result in miscommunication, conflicting priorities, and difficulty in aligning efforts to ensure successful and smooth deployments.

Inadequate documentation and audit trails: Without a formal process for deployment approvals, the documentation and audit trails of changes may be incomplete or inconsistent. This can hinder troubleshooting efforts, impact future decision-making, and create challenges during compliance audits or post-incident investigations.

Limited visibility and accountability: The absence of a deployment approval workflow makes it difficult to track, monitor, and report on the status and progress of changes. This lack of visibility compromises accountability and makes it challenging to identify bottlenecks, address issues promptly, and ensure compliance with organizational policies and standards.

Addressing these challenges by implementing a structured deployment approval workflow is essential to mitigate risks, ensure efficient change management, and maintain a stable and secure production environment. By establishing clear approval processes, organizations can improve control, reduce operational risks, enhance collaboration, and enable effective documentation and auditing of changes.




In the pre-deployment pipeline, a Change Record ID obtained from the Pull Request raised against an environment branch of the deployment repository is utilized. This pipeline plays a crucial role in validating the record's authenticity and relevance. By cross-referencing the Change Record ID, the pipeline ensures that the proposed changes align with the documented requirements and intended scope of the deployment. Subsequently, the pipeline provides a status check update to the Pull Request, either allowing or denying the request based on the outcome of the validation process. This status update enables the development team to proceed with confidence, knowing that the necessary checks and balances have been completed before proceeding with the deployment.
